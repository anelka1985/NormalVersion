package com.egame.utils.ui;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Random;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Rect;

/**
 * 提供操作字符串的通用方法
 * 
 * @author 肖新慧
 * 
 */
public class StringUtil {

	public static final String ENCODING = "utf-8";

	private StringUtil() {
	}

	public static String getStrDate() {
		SimpleDateFormat dd = new SimpleDateFormat("yyyy-MM-dd");
		return dd.format(new Date());
	}

	public static String getStrDate(Date date) {
		SimpleDateFormat dd = new SimpleDateFormat("yyyy-MM-dd");
		return dd.format(date);
	}

	public static String encode(String data) {
		try {
			return URLEncoder.encode(data, ENCODING);
		} catch (UnsupportedEncodingException e) {
			return data;
		}
	}

	// 随机数字产生
	public static String getRandomStr(int num) {
		StringBuffer temp = new StringBuffer();
		Random rand = new Random();
		for (int i = 0; i < num; i++) {
			temp.append(rand.nextInt(10));
		}
		return temp.toString();
	}

	/**
	 * 判断指定的字符串是否为null或空字符串
	 * 
	 * @param str
	 * @return
	 */
	public static final boolean isNullOrEmpty(String str) {
		if ((str == null) || "".equals(str)) {
			return true;
		}

		return false;
	}

	/**
	 * 判断指定的字符串是否为null、空字符串或空格字符串
	 * 
	 * @param str
	 * @return
	 */
	public static final boolean isNullOrTrimEmpty(String str) {
		if ((str == null) || "".equals(str.trim())) {
			return true;
		}

		return false;
	}

	/**
	 * 判断指定的字符串不为null，空字符串
	 * 
	 * @param str
	 * @return
	 */
	public static final boolean isNotNullOrEmpty(String str) {
		if ((str == null) || "".equals(str)) {
			return false;
		}

		return true;
	}

	public static String toStrNum(int num, int n) {
		String pat = "";

		for (int i = 0; i < n; i++)
			pat = pat + "0";
		java.text.DecimalFormat format = new java.text.DecimalFormat(pat);
		return format.format(num);
	}

	public static String filterChar(String str, String replace) {
		if (isEmpty(str))
			return "";
		str = str.replace("\\", replace);
		str = str.replace("\"", replace);
		str = str.replace("\'", replace);
		String reg = "@'\"？`~!@#$%^&*()_+={[}]|\\:;<>.?/-Aa%！￥……（）、：；“”’‘《》，。？－";
		for (int i = 0; i < reg.length(); i++) {
			str = str.replace(reg.substring(i, i + 1), replace);
		}

		return str;
	}

	public static String urlDecode(String str) {
		if (isEmpty(str))
			return "";
		return str.replace("&amp;", "&");
	}

	public static boolean isMobile(String str) {
		if (str == null || str.equals("") || str.trim().equals(""))
			return false;

		if (str.length() == 11 && isNum(str)) {
			if (str.startsWith("189") || str.startsWith("153")
					|| str.startsWith("133"))
				return true;
		}

		return false;
	}

	public static boolean isNum(String str) {
		for (int i = str.length(); --i >= 0;)
			if (!Character.isDigit(str.charAt(i)))
				return false;
		return true;
	}

	public static boolean isEmpty(String str) {
		if (str == null || str.trim().equals(""))
			return true;
		return false;
	}

	public static int getPixWidth(String str, Paint paint) {
		Rect rect = new Rect();

		// 返回包围整个字符串的最小的一个Rect区域
		paint.getTextBounds(str, 0, str.length(), rect);

		return rect.width();
	}

	/*
	 * 显示游戏描述函数 可以 收集为自动换行函数 showrect -- 有效显示区域 by -- 开始显示的y坐标 x坐标根据showrect给出
	 * 返回字符串总的行数
	 */
	public static int drawStringInRect(Canvas canvas, String text,
			Rect showrect, int by, Paint paint) {
		int x, y;
		int count = 1;

		// this.setservicedes("测试测试放大法测试测试放大法测试测试放大法测试测试放大法测试测试放大法的放大放大放大法打分的飞艾丝凡大奋斗安分大方倒萨奋斗是否热奋斗个飞奋斗才现在才在是飞奋斗埃弗顿安分大富翁额奋斗是否多少份2热2
		// 范德萨安定飞倒萨奋斗 4335 34 54 53 4 34 4 2 飞倒萨奋斗 奋斗奋斗安分大奋斗 滚动飞的啊奋斗安分大奋斗奋斗
		// 432423 4 324 324 324 324 23 432 热温柔额外奋斗撒奋斗阿萨");

		x = showrect.left + (int) paint.getTextSize();
		y = by;
		float pos[] = new float[text.length() * 2];
		float widths[] = new float[text.length()];
		paint.getTextWidths(text, widths);
		for (int i = 0; i < pos.length; i += 2) {
			pos[i] = x;
			pos[i + 1] = y;

			if (i / 2 + 1 < widths.length) {
				if (x + widths[i / 2] + widths[i / 2 + 1] <= showrect.right) {
					x += widths[i / 2];
				} else {
					x = showrect.left;
					y += paint.getTextSize() + 5;
					count++;
				}
			} else {
				if (x + widths[i / 2] <= showrect.right) {
					x += widths[i / 2];
				} else {
					x = showrect.left;
					y += paint.getTextSize() + 5;
					count++;
				}
			}

		}

		canvas.drawPosText(text, pos, paint);

		return count;
	}

	/**
	 * 从String返回Boolean值判断是否为true
	 * 
	 * @param s
	 *            传入字符串
	 * @return s=true的时候返回true,其他返回false
	 */
	public static Boolean getBoolean(String s) {
		if (s != null && s.equals("true")) {
			return true;
		} else {
			return false;
		}
	}

	/**
	 * @author rogerplum
	 * 
	 */
	public static String replaceBlank(String str) {
		Pattern p = Pattern.compile("\\s*|\r|\n|\t");
		Matcher m = p.matcher(str);
		String after = m.replaceAll("");
		return after;
	}
}
