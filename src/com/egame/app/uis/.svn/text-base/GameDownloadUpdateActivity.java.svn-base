package com.egame.app.uis;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import android.app.Activity;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.Color;
import android.os.Bundle;
import android.os.Environment;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.Button;
import android.widget.ListView;
import android.widget.TextView;

import com.egame.R;
import com.egame.app.EgameApplication;
import com.egame.app.adapters.GameDownloadUpdateAdapter;
import com.egame.app.services.DBService;
import com.egame.app.services.DownloadService;
import com.egame.beans.DownloadListBean;
import com.egame.config.Const;
import com.egame.utils.common.CommonUtil;
import com.egame.utils.common.HttpConnect;
import com.egame.utils.common.L;
import com.egame.utils.common.SourceUtils;
import com.egame.utils.sys.ApnUtils;
import com.egame.utils.ui.BaseActivity;
import com.egame.utils.ui.ToastUtil;
import com.eshore.network.stat.NetStat;

public class GameDownloadUpdateActivity extends Activity implements BaseActivity, OnClickListener {

	/**
	 * 游戏列表实体列表
	 */
	List<DownloadListBean> updateList = new ArrayList<DownloadListBean>();

	/**
	 * 下载任务适配器
	 */
	GameDownloadUpdateAdapter gameupdateListAdapter;

	ListView gameupdateList;

	/**
	 * 下载列表图片缓存
	 */
	protected Map<String, Bitmap> iconMap = new HashMap<String, Bitmap>();

	DBService dbService;

	int expendIndex = -1;

	/** 加载布局 */
	private View head;

	private Button btnHead;

	private TextView tvHead;

	private TextView noDownloadHint = null;

	private List<String> downloaded = new ArrayList<String>();

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.egame_game_downloadmisson);

		noDownloadHint = (TextView) findViewById(R.id.nodownloadhint);
		noDownloadHint.setText(R.string.egame_manager_zsmyksjdyx);

		initData();
		initView();
		initEvent();
		initViewData();
		IntentFilter intentFilter = new IntentFilter(Const.ACTION_DOWNLOAD_STATE);
		this.registerReceiver(br, intentFilter);
		dbService = new DBService(this);
		dbService.open();

		updateList.clear();
		List<DownloadListBean> list = getData();
		updateList.addAll(list);
		gameupdateListAdapter.notifyDataSetChanged();
		refreshCount2();
	}

	@Override
	protected void onDestroy() {
		dbService.close();
		unregisterReceiver(br);
		super.onDestroy();
	}

	BroadcastReceiver br = new BroadcastReceiver() {
		@Override
		public void onReceive(Context context, Intent intent) {
			if (GameDownloadUpdateActivity.this.isFinishing()) {
				return;
			}
			if (intent.getExtras().getString("msg").equals("refresh") || intent.getExtras().getString("msg").equals("change")) {
				updateList.clear();
				List<DownloadListBean> list = getData();
				updateList.addAll(list);
				gameupdateListAdapter.notifyDataSetChanged();
				refreshCount();
			}
		}
	};

	void refreshCount() {
		Cursor cursor = dbService.getUpdateGame();
		if (cursor != null && cursor.getCount() > 0) {
			// if(gameupdateList.getHeaderViewsCount() < 1){
			// gameupdateList.addHeaderView(head, null, false);
			// }
			tvHead.setText("您有" + cursor.getCount() + "个软件可升级");
		} else {
			tvHead.setText("您有" + 0 + "个软件可升级");
//			gameupdateList.removeHeaderView(head);
		}
		if (cursor != null) {
			cursor.close();
		}
	}

	void refreshCount2() {
		Cursor cursor = dbService.getUpdateGame();
		if (cursor != null && cursor.getCount() > 0) {
			// if(gameupdateList.getHeaderViewsCount() < 1){
			// gameupdateList.addHeaderView(head, null, false);
			// }
			tvHead.setText("您有" + cursor.getCount() + "个软件可升级");
		} else {
			gameupdateList.removeHeaderView(head);
		}
		if (cursor != null) {
			cursor.close();
		}
	}

	private List<DownloadListBean> getData() {
		long time = System.currentTimeMillis();
		List<DownloadListBean> list = new ArrayList<DownloadListBean>();
		Cursor cursor = dbService.getUpdateGame();
		if (cursor.moveToFirst()) {
			do {
				DownloadListBean bean = new DownloadListBean(cursor);
				list.add(bean);
				if (null == iconMap.get(bean.getServiceid())) {
					if (!downloaded.contains(bean.getServiceid())) {
						new Thread(new GetPic(bean)).start();
						downloaded.add(bean.getServiceid());
					}
				}
			} while (cursor.moveToNext());
		}
		cursor.close();
		if (list.size() < 1) {
			noDownloadHint.setVisibility(View.VISIBLE);
			gameupdateList.setVisibility(View.GONE);
		} else {
			noDownloadHint.setVisibility(View.GONE);
			gameupdateList.setVisibility(View.VISIBLE);
		}
		// iconCache.clear();
		L.d("time", "time is " + (System.currentTimeMillis() - time));
		return list;
	}

	@Override
	public void initData() {

	}

	@Override
	public void initView() {
		gameupdateList = (ListView) findViewById(R.id.gameList);
		head = getLayoutInflater().inflate(R.layout.egame_downloadupdate_head, null);
		btnHead = (Button) head.findViewById(R.id.head);
		tvHead = (TextView) head.findViewById(R.id.headtext);
		gameupdateList.addHeaderView(head, null, false);
		gameupdateListAdapter = new GameDownloadUpdateAdapter(updateList, iconMap, GameDownloadUpdateActivity.this);
		gameupdateList.setAdapter(gameupdateListAdapter);
	}

	@Override
	public void initViewData() {
	}

	@Override
	public void initEvent() {
		gameupdateList.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> arg0, View arg1, int arg2, long arg3) {
				if (gameupdateListAdapter.getExpendIndex() == arg2 - 1) {
					gameupdateListAdapter.setExpendIndex(-999);
					gameupdateListAdapter.notifyDataSetChanged();
				} else {
					gameupdateListAdapter.setExpendIndex(arg2 - 1);
					gameupdateListAdapter.notifyDataSetChanged();
					if (arg2 == updateList.size() - 1) {
						arg0.setSelection(100);
					}
				}
			}
		});

		btnHead.setOnClickListener(this);
	}

	@Override
	public void onClick(View v) {

		// 全部升级按钮事件
		if (v == btnHead) {
			EgameApplication application = (EgameApplication) getApplication();
			Cursor cursor = dbService.getNeedUpdateGame();
			if (ApnUtils.checkNetWorkStatus(GameDownloadUpdateActivity.this)) {
				if (Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {
					if (cursor != null && cursor.getCount() > 0) {
						cursor.moveToFirst();
						btnHead.setClickable(false);
						btnHead.setTextColor(Color.WHITE);
						btnHead.setBackgroundResource(R.drawable.egame_jingyong);
						do {
							DownloadListBean bean = new DownloadListBean(cursor);
							Bundle bundle = DownloadService.getBundle(GameDownloadUpdateActivity.this, Integer.parseInt(bean.getServiceid()),
									(int)(bean.getTotalsize() / 1024), application.getPhoneNum(), bean.getCpid(), bean.getCpcode(), bean.getServiceCode(),
									bean.getName(), bean.getChannelid(), bean.getIconurl(), application.getUA(), CommonUtil.getUserId(GameDownloadUpdateActivity.this), SourceUtils.DEFAULT,bean.getSortName());
							Intent intent = new Intent(GameDownloadUpdateActivity.this, DownloadService.class);
							intent.putExtras(bundle);
							startService(intent);
						} while (cursor.moveToNext());
						ToastUtil.show(GameDownloadUpdateActivity.this, R.string.egame_addUpdate_hint);
					} else {
						ToastUtil.show(GameDownloadUpdateActivity.this, "未找到SD卡，请插入");
					}
				} else {
					// ToastUtil.show(GameDownloadUpdateActivity.this,
					// "无法连接到网络，请检查网络配置");
				}
			}
		}
	}

	@Override
	protected void onResume() {
		super.onResume();
		L.d("download", "activity onResume");
		NetStat.onResumePage();
	}

	@Override
	protected void onPause() {
		super.onPause();
		NetStat.onPausePage("GameDownloadUpdateActivity");
	}

	class GetPic implements Runnable {

		DownloadListBean bean;

		GetPic(DownloadListBean bean) {
			this.bean = bean;
		}

		@Override
		public void run() {
			Bitmap icon;
			try {
				icon = HttpConnect.getHttpBitmap(bean.getIconurl());
				iconMap.put(bean.getServiceid(), icon);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

	}

}
